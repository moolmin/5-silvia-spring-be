name: Deploy Springboot App to EC2

on:
  push:
    branches:
      - deploy-to-ec2

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew bootJar -x test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: docker build --platform linux/amd64 -t avoworld:latest .

      - name: Tag Docker image
        run: docker tag avoworld:latest ${{ steps.login-ecr.outputs.registry }}/avoworld:${{ github.sha }}

      - name: Push Docker image to Amazon ECR
        run: docker push ${{ steps.login-ecr.outputs.registry }}/avoworld:${{ github.sha }}

      - name: SSH into EC2 and login to ECR
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            echo "Logging into ECR"
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            echo "Login successful"

      - name: SSH into EC2 and clean up Docker resources
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            echo "Stopping and removing existing containers"
            sudo docker ps -q | xargs -r sudo docker stop
            sudo docker ps -asq | xargs -r sudo docker rm
            echo "Removing unused Docker images"
            sudo docker images -q | xargs -r sudo docker rmi
            echo "Pruning Docker system"
            sudo docker system prune -af

      - name: Pull Docker image from ECR
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            echo "Pulling Docker image"
            sudo docker pull ${{ steps.login-ecr.outputs.registry }}/avoworld:${{ github.sha }}
            echo "Docker image pulled"

      - name: SSH into EC2 and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            echo "Stopping and removing existing container if exists"
            sudo docker stop avoworld || true
            sudo docker rm avoworld || true
            echo "Running new container"
            sudo docker run -d -p 8080:8080 --name avoworld ${{ steps.login-ecr.outputs.registry }}/avoworld:${{ github.sha }}
            echo "Deployment completed"
