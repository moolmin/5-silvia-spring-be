name: Deploy Springboot App to EC2

on:
  push:
    branches:
      - deploy-to-ec2

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Amazon ECR
        id: ecr_login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        run: docker build --platform linux/amd64 -t avoworld:latest .

      - name: Tag Docker image
        run: docker tag avoworld:latest ${{ secrets.ECR_URL }}/avoworld:latest

      - name: Push Docker image to ECR
        run: docker push ${{ secrets.ECR_URL }}/avoworld:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: SSH to EC2 and deploy
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            # Pull the latest Docker image from ECR
            docker pull ${{ secrets.ECR_URL }}/avoworld:latest
            
            # Stop the existing container if it's running
            docker stop avoworld || true
            
            # Remove the existing container if it exists
            docker rm avoworld || true
            
            # Run a new container with the updated image
            docker run -d --name avoworld -p 8080:8080 ${{ secrets.ECR_URL }}/avoworld:latest
